estSigma <- fitXandWY$Sigma
Matrix::norm(projection(estGamma0) - projection(dat$Gamma0), "F")
GPFC$estDelta <- estSigma
GPFC$estbeta <- fitXandWY$D
GPFC$estGamma0 <- estGamma0
# Need to update this
GPFC$Sigmastar <- NA
GPFC$estGamma <- NA
GPFC$estBasisContinuousPart <- solve(GPFC$estDelta) %*% projection(estGamma0)
GPFC$estBasisBinaryPart <-
rbind(
cbind(crossprod(GPFC$estbeta, solve(GPFC$estDelta, estGamma0)),  - estA[1:q,, drop = F]),
cbind(matrix(0, kq, ncol(estGamma0)),  estA[-c(1:q),, drop = F])
)
### separate fit fto get initial estimates for Gamma and SigmaStar
SPFC <- list()
n <- max(Y$cluster)
sep_fit <- lapply(1:n, function(ii){
try({
Xi <- X[Y$cluster == ii, ]
Yi <- Y[Y$cluster == ii,]$Y
fyi <- fy[Y$cluster == ii,, drop = FALSE]
ni <- nrow(Xi)
#Wi <- Wrep[Y$cluster == ii,, drop = FALSE] # This is not possible, since everything is a constant
fit <- RRRR::RRR(y = Xi, x = fyi, z = NULL, r = d)
sep_fit_Gamma <-  qr.Q(qr(fit$A))
sep_fit_C1 <- qr.R(qr(fit$A)) %*% t(fit$B)
sep_fit_beta <- matrix(0, p, q)
sep_fit_Delta <- fit$Sigma
# separate fit basis
sep_fit_basis <- rbind(solve(sep_fit_Delta, sep_fit_Gamma),
-t(sep_fit_beta) %*% solve(sep_fit_Delta, sep_fit_Gamma)
)
#
# col1 <- rbind(
#   diag(ni) %x% (solve(sep_fit_Delta, sep_fit_Gamma) %*% sep_fit_C1),
#   matrix(1, nrow = 1, ncol = ni) %x% (crossprod(sep_fit_beta, solve(sep_fit_Delta, sep_fit_Gamma)) %*% sep_fit_C1),
#   matrix(0, nrow = kq, ncol = ni*nrow(sep_fit_C1))
# )
# col2 <- rbind(
#   matrix(0, nrow = ni*p, ncol = nrow(estC2)),
#   -estA[1:q,, drop = F] %*% t(estC2),
#   estA[-c(1:q),, drop = F] %*% t(estC2)
# )
# sep_fit_basis <- cbind(col1, col2)
return(list(sep_fit_Gamma, sep_fit_Delta, sep_fit_basis))
})
})
# sep_fit for Gamma0
sep_fit_Gamma <- lapply(sep_fit, "[[", 1)
SPFC$estGamma0 <- frechetMeanGr(sep_fit_Gamma)
SPFC$estV <- lapply(sep_fit_Gamma, invexpmap, Gamma0 = SPFC$estGamma0)
SPFC$Sigmastar <- Reduce("+", lapply(SPFC$estV, tcrossprod))/length(SPFC$estV)
SPFC$estDelta <- Reduce("+", lapply(sep_fit, "[[", 2))/n
SPFC$estMeanCS <- SPFC$estDelta %*% projection(SPFC$estGamma0)
SPFC$estThetai <- lapply(sep_fit, "[[", 3)
# MCEM fit
# Initialization
InitEst <- list()
InitEst$Gamma0 <- GPFC$estGamma0
InitEst$Delta <- fitXandWY$Sigma
InitEst$beta <- fitXandWY$D
InitEst$muX <- t(fitXandWY$mu)
InitEst$muW <- t(colMeans(W))
InitEst$Gamma <- sep_fit_Gamma
estV <- lapply(sep_fit_Gamma, invexpmap, Gamma0 = InitEst$Gamma0)
InitEst$Sigmastar <- Reduce("+", lapply(estV, tcrossprod))/length(estV)
fy <- cbind(1, fy)
InitEst$C <- matrix(rnorm(d * ncol(fy)), nrow = d)
RPFCfit <- MCEM_update_noGamma0(X, Y, fy, Wrep, InitEst, niter = 40, burnin = 10,
tol = 0.05, mc.cores = detectCores()/2, B = 800)
RPFCfit$estBasisContinuousPart <-
solve(RPFCfit$estDelta, projection(RPFCfit$estGamma0))
RPFCfit$estBasisBinaryPart <-
rbind(
cbind(crossprod(RPFCfit$estbeta, solve(RPFCfit$estDelta, RPFCfit$estGamma0)),  -estA[1:q,, drop = F]),
cbind(matrix(0, kq, ncol(RPFCfit$estGamma0)),  estA[-c(1:q),, drop = F])
)
#### Prediction of cluster-specific spaces
# Final E-step
doEstepfinal <- Estep_allclusters(X, Y, fy, Wrep,
RPFCfit$estmuX, RPFCfit$estGamma0, RPFCfit$estC,
RPFCfit$estmuW,
RPFCfit$estbeta, RPFCfit$estDelta, RPFCfit$estSigmastar, B = 2000)
wb <- doEstepfinal$wb
Gamma_array <- doEstepfinal$Gamma
Theta_array <- doEstepfinal$Theta # on tangent space at estGamma0
posteriorGamma <- lapply(1:n, function(ii){
tmp <- Reduce("+", Map("*",  Theta_array, wb[ii, ]))
gi <- expmap(tmp, RPFCfit$estGamma0)
})
RPFCfit$estThetai <- lapply(posteriorGamma, function(Gamma){
rbind(solve(RPFCfit$estDelta, Gamma),
-t(RPFCfit$estbeta) %*% solve(RPFCfit$estDelta, Gamma)
)
})
##### Evaluation of estimation
result <- list()
### Mean (Fixed) spaces
result$estMeanSpaceContinuous = c(
GPFC = norm(GPFC$estBasisContinuousPart - trueTheta0ContinuousPart, "F"),
RPFC = norm(RPFCfit$estBasisContinuousPart - trueTheta0ContinuousPart, "F"),
SPFC = norm(SPFC$estMeanCS - trueTheta0ContinuousPart, "F"))
result$estSpaceBinary = c(
RPFC = norm(projection(RPFCfit$estBasisBinaryPart) - projection(trueTheta0BinaryPart), "F"),
SPFC = norm(projection(GPFC$estBasisBinaryPart) - projection(trueTheta0BinaryPart), "F"))
#### Random effect covariance
result$SigmaTilde = c(RPFC = norm(dat$Sigma - RPFCfit$estSigmastar, "F"),
SPFC = norm(dat$Sigma - SPFC$Sigmastar, "F"))
### prediction of cluster-specific CS
RPFC_MSPE <- sapply(1:n, function(ii) {
norm(projection(RPFCfit$estThetai[[ii]]) - projection(trueThetai[[ii]]),
"F")
})
SPFC_MSPE <- sapply(1:n, function(ii) {
norm(projection(SPFC$estThetai[[ii]]) - projection(trueThetai[[ii]]), "F")
})
result$MSPE <- c(RPFC = mean(RPFC_MSPE), SPFC = mean(SPFC_MSPE))
return(list(
result = result,
RPFCfit = RPFCfit,
dat = dat
))
}
Settings <- expand.grid(n = c(100, 500, 1000),
SigmaTildeType = 1:3)
id_artemis <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) # from 1-80
if(is.na(id_artemis)) id_artemis <- 2
index_table <- (id_artemis -1) %/% 20 + 1
n <- Settings$n[index_table]
SigmaTildetype <- Settings$SigmaTildeType[index_table]
if (SigmaTildetype == 2){
SigmaTilde <- 0.5*0.5^abs(outer(1:p, 1:p, "-"))
}else if (SigmaTildetype == 1){
SigmaTilde <- 0.5*diag(p)
}else if (SigmaTildetype == 3){
SigmaTilde <- matrix(0.2, p, p)
diag(SigmaTilde) <- 0.5
}
p <- 7
d <- 1
nsim <- 10
n <- Settings$n[index_table]
SigmaTildetype <- Settings$SigmaTildeType[index_table]
if (SigmaTildetype == 2){
SigmaTilde <- 0.5*0.5^abs(outer(1:p, 1:p, "-"))
}else if (SigmaTildetype == 1){
SigmaTilde <- 0.5*diag(p)
}else if (SigmaTildetype == 3){
SigmaTilde <- matrix(0.2, p, p)
diag(SigmaTilde) <- 0.5
}
nsim = 1
Sim_onesigma <- lapply(1:nsim, function(seed){
print(seed)
try(sim1(n = n, SigmaTilde = SigmaTilde))
})
rm(list = ls())
.libPaths(".")
if (!require(RRRR)){
install.packages("RRRR", repos = "http://cran.us.r-project.org",INSTALL_opts = '--no-lock')
}
utis <- new.env()
library(purrr)
library(RRRR)
library(lme4)
library(Rcpp)
library(RcppArmadillo)
source("../ancillary_functions.R")
source("../IntrinsicMeanGrassMan.R")
source("../RMIR_MCEM_code_allcontinuous+qbinary.R")
# Examples follow Bura et al. (2015) Appendix
gen_gamma <- function(n, p, d, SigmaTilde, Gamma0 = NULL){
if(is.null(Gamma0)){
Gamma0 <- pracma::randortho(p)[, 1:d, drop = FALSE]
}
K <- diag(p) - tcrossprod(Gamma0)
theta <- lapply(1:n, function(k){
v <- mvtnorm::rmvnorm(d, rep(0, p), SigmaTilde)
K %*% t(v)
})
Gamma <- sapply(theta, expmap, Gamma0, simplify = FALSE)
Sigma <- K %*% SigmaTilde %*% K
return(list(Gamma0 = Gamma0, Gamma = Gamma, Sigma = Sigma))
}
gen_onecluster <- function(m, Gammai, Delta, C1,
b2, Ai, sigmay = 1,
mu_Y = 0){
#browser()
# n i
# A: 1 \times q matrix of random effects on the W|Y part, each column corresponding to one binary, each row corresponds to one cluster
Ai <- matrix(Ai, nrow = 1)
q <- ncol(Ai)
p <- nrow(Gammai);
d <- ncol(Gammai)
Y <- rnorm(m, mean = 0, sd = sqrt(sigmay))
fy <- as.matrix(Y)
# Generating W from q logistic model of W | Y
probs <- exp(Y %*% Ai)/(1+exp(Y %*% Ai))
W <- apply(probs, 2, rbinom, n = m, size = 1)
W <- as.matrix(W)
# Generating X from X|W, Y
if (d==1){
X <- fy %*% C1 %*% t(Gammai) +
W %*% t(b2) + mvtnorm::rmvnorm(m, rep(0, p), Delta)
} else if (d==2){
fy <- cbind(Y, Y^2)
X <- fy %*% C1 %*% t(Gammai) +
W %*% t(b2) + mvtnorm::rmvnorm(m, rep(0, p), Delta)
}
return(list(X = X, Y = as.matrix(Y), W = as.matrix(W), b2 = b2))
}
function(){
n = 100; p = 7; d = 1; q = 4; A0 = matrix(0.5, n, q);
SigmaTilde = 0.3*diag(p)
A <- A0 + matrix(mvtnorm::rmvnorm(n, sigma = 0.3*diag(q)), n, q)
b2 <- matrix(rnorm(p*q), q, p)
}
gen_allclusters <- function(n, p, d, A0,
C1 = matrix(3, ncol = 1),
Delta, b2, sigma_a = 0.3, SigmaTilde){
if (d==2){
C1 = matrix(c(3, 0, 0, 1/2), ncol = d)
}
q <- ncol(A0)
v <- gen_gamma(n, p, d, SigmaTilde)
A <- A0 + matrix(mvtnorm::rmvnorm(n, sigma = sigma_a*diag(q)), n, q)
Gamma0 <- v[[1]]; Gamma <- v[[2]]; Sigma <- v[[3]]
clusterSize <- sample(15:20, size = n, replace = TRUE)
gen_all_data <- mapply(FUN = function(oneclusterSize, oneGamma, Ai){
gen_onecluster(oneclusterSize, oneGamma, Delta, C1, b2, Ai)
}, clusterSize, Gamma, data.frame(t(A)), SIMPLIFY = FALSE)
X <- Reduce("rbind", gen_all_data %>% map(1))
Y <- Reduce("rbind", gen_all_data %>% map(2))
W <- Reduce("rbind", gen_all_data %>% map(3))
Y <- data.frame(Y = Y, cluster = rep(1:n, clusterSize))
return(list(Gamma0 = Gamma0, X = X, Y = Y, W = W,
Gamma = Gamma,  A = A,
Sigma = Sigma))
}
##### Testing a function
sim1 <- function(n, SigmaTilde,
q = 4, d = 1, p = 7, A0 = matrix(0.5, n, q),
sigma_a = 0.6,
C1 = matrix(3, ncol = 1), Delta = diag(p)){
b2 = matrix(rbinom(p*q, size = 1, prob = 0.2) * sample(c(-1, 1), size = p*q, replace = TRUE), p, q)
dat <- gen_allclusters(n, p, d, A0, C1,
Delta, b2, sigma_a, SigmaTilde)
X <- dat$X; Y = dat$Y; W = dat$W;
A = dat$A
# true dimension reduction
trueTheta0ContinuousPart <- solve(Delta, projection(dat$Gamma0))
trueThetai <- lapply(1:n, function(i){
rbind(solve(Delta, dat$Gamma[[i]])  %*% C1,
-crossprod(b2, solve(Delta, dat$Gamma[[i]])) %*% C1 + A[i,]
)
})
#### Fit a mixed logistic model on W|Y
df = data.frame(Y, W)
estAi <- apply(W, 2, function(Wk){
fitWandY <- lme4::glmer(Wk ~ Y + (-1+Y|cluster), data = df, family = binomial)
est_ai <- coef(fitWandY)$cluster[, 2]
#est_a0 <- summary(fitWandY)$coefficients[2, 1]
})
##### X | W, Y
#### Global fit
# fit a multivariate reduce rank model on X using MLE
fy = matrix(Y$Y)
fitXandWY <- RRRR::RRR(y = X, x = fy, z = W,
mu = TRUE,
r = d)
estb2 <- fitXandWY$D # same direction as in b2, but not
estA <- fitXandWY$A
estGamma0 <- qr.Q(qr(estA))
estC1 <- qr.R(qr(fitXandWY$A)) %*% fitXandWY$B
estSigma <- fitXandWY$Sigma
Matrix::norm(projection(estA) - projection(dat$Gamma0), "F")
GPFC <- list()
GPFC$estbeta <- fitXandWY$D
GPFC$estGamma0 <- estGamma0
GPFC$Sigmastar <- NA
GPFC$estGamma <- NA
GPFC$estDelta <- estSigma
GPFC$estBasisContinuousPart <- solve(GPFC$estDelta, projection(estGamma0))
### SPFC FIT
SPFC <- list()
n <- max(Y$cluster)
sep_fit <- lapply(1:n, function(ii){
Xi <- X[Y$cluster == ii, ]
fyi <- fy[Y$cluster == ii,, drop = FALSE]
Wi <- W[Y$cluster == ii,, drop = FALSE]
fit <- RRRR::RRR(y = Xi, x = fyi, z = Wi, r = d)
sep_fit_Gamma <-  qr.Q(qr(fit$A))
sep_fit_Delta <- fit$Sigma
sep_fit_estC1 <- qr.R(qr(fit$A)) %*% t(fit$B)
sep_fit_basis <- rbind(
solve(sep_fit_Delta, sep_fit_Gamma) %*% sep_fit_estC1,
-crossprod(fit$D, solve(sep_fit_Delta, sep_fit_Gamma)) %*% sep_fit_estC1  + estAi[ii, ])
return(list(sep_fit_Gamma, sep_fit_basis, sep_fit_Delta))
})
# sep_fit for Gamma0
sep_fit_Gamma <- lapply(sep_fit, "[[", 1)
SPFC$estGamma0 <- frechetMeanGr(sep_fit_Gamma)
SPFC$estV <- lapply(sep_fit_Gamma, invexpmap, Gamma0 = SPFC$estGamma0)
SPFC$estSigmastar <- Reduce("+", lapply(SPFC$estV, tcrossprod))/length(SPFC$estV)
SPFC$estMeanCS <- frechetMeanGr(lapply(sep_fit, "[[", 2))
SPFC$estDelta <- Reduce("+", lapply(sep_fit, "[[", 3))/n
SPFC$estBasisContinuousPart <- SPFC$estDelta %*% projection(SPFC$estGamma0)
### MCEM fit
################
InitEst <- list()
InitEst$Gamma0 <- qr.Q(qr(estA))
InitEst$Delta <- fitXandWY$Sigma
InitEst$beta <- fitXandWY$D
InitEst$muX <- t(fitXandWY$mu)
InitEst$muW <- t(colMeans(W))
InitEst$Gamma <- sep_fit_Gamma
estV <- lapply(sep_fit_Gamma, invexpmap, Gamma0 = InitEst$Gamma0)
InitEst$Sigmastar <- Reduce("+", lapply(estV, tcrossprod))/length(estV)
fy <- cbind(1, Y$Y)
InitEst$C <- matrix(rnorm(d * ncol(fy)), nrow = d)
RPFCfit <- MCEM_update_noGamma0(X, Y, fy, W, InitEst, niter = 80, burnin = 10,
tol = 0.01, mc.cores = detectCores()/2, B = 800)
RPFCfit$estBasisContinuousPart <-
solve(RPFCfit$estDelta, projection(RPFCfit$estGamma0))
# Estimation of some parameters
norm(RPFCfit$estDelta - Delta)
norm(GPFC$estDelta - Delta)
norm(solve(RPFCfit$estDelta) - solve(Delta))
norm(solve(GPFC$estDelta) - solve(Delta))
norm(RPFCfit$estbeta - b2)
norm(GPFC$estbeta - b2)
# Final E-step
doEstepfinal <- Estep_allclusters(X, Y, fy, W,
RPFCfit$estmuX, RPFCfit$estGamma0, RPFCfit$estC,
RPFCfit$estmuW,
RPFCfit$estbeta, RPFCfit$estDelta, RPFCfit$estSigmastar, B = 2000)
wb <- doEstepfinal$wb
Gamma_array <- doEstepfinal$Gamma
Theta_array <- doEstepfinal$Theta # on tangent space at estGamma0
posteriorGamma <- lapply(1:n, function(ii){
tmp <- Reduce("+", Map("*",  Theta_array, wb[ii, ]))
gi <- expmap(tmp, RPFCfit$estGamma0)
tmpi <- rbind(
solve(RPFCfit$estDelta, gi) %*% RPFCfit$estC[, -1],
-crossprod(RPFCfit$estbeta, solve(RPFCfit$estDelta, gi)) %*% RPFCfit$estC[, -1] + estAi[ii,])
})
##### Evaluation of estimation
result <- list()
### Mean (Fixed) spaces
result$estMeanSpaceContinuous = c(
GPFC = norm(GPFC$estBasisContinuousPart - trueTheta0ContinuousPart, "F"),
RPFC = norm(RPFCfit$estBasisContinuousPart - trueTheta0ContinuousPart, "F"),
SPFC = norm(SPFC$estBasisContinuousPart - trueTheta0ContinuousPart, "F"))
#### Random effect covariance
result$SigmaTilde = c(RPFC = norm(dat$Sigma - RPFCfit$estSigmastar, "F"),
SPFC = norm(dat$Sigma - SPFC$estSigmastar, "F"))
### prediction of cluster-specific CS
RPFC_MSPE <- sapply(1:n, function(ii){
norm(projection(posteriorGamma[[ii]]) - projection(trueThetai[[ii]]), "F")
})
SPFC_MSPE <- sapply(1:n, function(ii){
norm(projection(sep_fit[[ii]][[2]]) - projection(trueThetai[[ii]]), "F")
})
result$MSPE <- c(RPFC = mean(RPFC_MSPE), SPFC = mean(SPFC_MSPE))
return(list(result = result, RPFCfit = RPFCfit, dat = dat))
}
Settings <- expand.grid(n = c(100, 500, 1000),
SigmaTildeType = 1:3)
# Divide into 20 batches, each having 10 runs
id_artemis <- as.numeric(Sys.getenv("PBS_ARRAY_INDEX")) # from 1-80
if(is.na(id_artemis)) id_artemis <- 21
index_table <- (id_artemis -1) %/% 20 + 1
p <- 7
d <- 1
nsim <- 20
n <- Settings$n[index_table]
SigmaTildetype <- Settings$SigmaTildeType[index_table]
if (SigmaTildetype == 2){
SigmaTilde <- 0.5*0.5^abs(outer(1:p, 1:p, "-"))
}else if (SigmaTildetype == 1){
SigmaTilde <- 0.5*diag(p)
}else if (SigmaTildetype == 3){
SigmaTilde <- matrix(0.2, p, p)
diag(SigmaTilde) <- 0.5
}
nsim = 1
Sim_onesigma <- lapply(1:nsim, function(seed){
print(seed)
try(sim1(n = n, SigmaTilde = SigmaTilde))
})
version
scale_convert <- expand.grid(Question = colnames(finalexam_raw)[-c(1:3)],
Mark = LETTERS[1:7]) %>%
arrange(Question) %>%
mutate(Numeric = rep(c(10, 9,  8,  6, 3, 1, 1), 7))
v <- (1,1)/sqrt(2)
v <- c(1,1)/sqrt(2)
u <- rnorm(100)
x <- v * u
x
v <- c(1,1)/sqrt(2)
v
v <- matrix(c(1,1)/sqrt(2))
u <- rnorm(100)
x <- outer(u, v)
dim(x)
v <- matrix(c(1,1)/sqrt(2))
u <- rnorm(100)
x <- kronecker(u, v)
dim(x)
v <- matrix(c(1,1)/sqrt(2))
u <- rnorm(100)
x <- kronecker(v, u)
dim(x)
x <- kronecker(t(v), u)
dim(x)
cov(x)
eigen(cov(x = ))
eigen(cov(x))
d = 3;
Sigma <- matrix(c(1, 0.5, 0.2,
0.5, 1, 0.3,
0.2, 0.3, 1), 3, 3)
d = 3;
Sigma <- matrix(c(1, 0.5, 0.2,
0.5, 1, 0.3,
0.2, 0.3, 1), 3, 3)
v <- matrix(c(1, 1, 4))
v <- v/sqrt(sum(v^2))
tcrossprod(v)
PvSigma <- tcrossprod(v) %*% Sigma
PvperpSigma <- (diag(3) - tcrossprod(v)) %*% Sigma
Pv + PvperpSigma
PvSigma + PvperpSigma
eigen(PvSigma)
v
PvperpSigma %*% eigen(PvSigma)$vectors[, 1]
v %*% PvperpSigma
v
t(v) %*% PvPerpSigma
t(v) %*% PvperpSigma
crossprod(v, PvperpSigma %*% v)
V2 <- eigen(PvperpSigma)$vectors
V2
t(V2) %*% Sigma %*% V2
V2 %*% Sigma %*% t(V2)
eigen(Sigma)
V2 <- eigen(PvperpSigma)$vectors
t(V2) %*% Sigma %*% V2
V2 %*% Sigma %*% t(V2)
eigen(PvperpSigma)
Sigma <- matrix(c(1, 0.5, 0.2,
0.5, 1, 0.3,
0.2, 0.3, 1), 3, 3)
v <- matrix(c(1, 1, 4))
v <- v/sqrt(sum(v^2))
solve(V2)
V2
V2 <- eigen(PvperpSigma)$vectors
V2
t(V2) %*% V2
PvperpSigma
gamma = .1
xseq <- seq(0.001, 2, len = 50)
y = -xseq^2 - gamma*log(x)
gamma = .1
xseq <- seq(0.001, 2, len = 50)
y = -xseq^2 - gamma*log(xseq)
gamma = .1
xseq <- seq(0.001, 2, len = 50)
y = -xseq^2 - gamma*log(xseq)
plot(x, y, type = "l")
gamma = .1
xseq <- seq(0.001, 2, len = 50)
y = -xseq^2 - gamma*log(xseq)
plot(xseq, y, type = "l")
plot(xseq, y, type = "l")
gamma = .1
xseq <- seq(0.001, 4, len = 50)
y = -xseq^2 - gamma*log(xseq)
plot(xseq, y, type = "l")
log(0)
gamma = .1
xseq <- seq(1e-5, 4, len = 50)
y = -xseq^2 - gamma*log(xseq)
plot(xseq, y, type = "l")
xseq
log(xseq)
lambda0 = 2
gamma_seq = seq(0, 5, len = 20)
lambda = lambda0 - (lambda0^3)/(2*lambda0^2 - gamma_seq)
lambda
lambda0 = 2
gamma_seq = seq(0, 5, len = 20)
lambda = lambda0 + (lambda0^3)/(2*lambda0^2 - gamma_seq)
lambda
lambda0 = 2
gamma_seq = seq(0, 5, len = 20)
lambda = lambda0 - (lambda0^3)/(2*lambda0^2 + gamma_seq)
lambda
lambda0 = 1
gamma_seq = seq(0, 5, len = 20)
lambda = lambda0 - (lambda0^3)/(2*lambda0^2 + gamma_seq)
plot(gamma_seq, lambda0)
plot(gamma_seq, lambda)
gamma = .1
xseq <- seq(1e-5, 4, len = 50)
y = -xseq^2/gamma - log(xseq)
plot(xseq, y, type = "l")
max(y)
min(y)
